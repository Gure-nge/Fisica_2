import networkx as nx
import tkinter as tk

def construir_grafo(nodos, componentes, conexiones):
    G = nx.Graph()
    for nodo in nodos:
        G.add_node(nodo)
    for c in conexiones:
        n1, n2, tipo, valor = c
        G.add_edge(n1, n2, tipo=tipo, valor=valor)
    return G

def detectar_mallas(G, max_mallas=2):
    ciclos = nx.cycle_basis(G)
    return ciclos[:max_mallas]

def armar_ecuaciones(mallas, componentes, conexiones):
    # Aquí construirías ecuaciones de KVL para cada malla
    pass

# Clase para la interfaz gráfica
class Aplicacion:
    def __init__(self, master):
        self.master = master
        master.title("Detector de Mallas")

        self.marco = tk.Frame(master)
        self.marco.pack()

        self.boton_calcular = tk.Button(self.marco, text="Calcular Mallas", command=self.calcular_mallas)
        self.boton_calcular.pack(side=tk.LEFT, padx=5)

    def calcular_mallas(self):
        nodos = ["N0", "N1", "N2"]
        conexiones = [
            ("N0", "N1", "resistencia", 100),
            ("N1", "N2", "voltaje", 5),
            ("N2", "N0", "resistencia", 200),
        ]

        G = construir_grafo(nodos, [], conexiones)
        mallas = detectar_mallas(G)
        print("Mallas:", mallas)

# Ejemplo de uso:
if __name__ == "__main__":
    root = tk.Tk()
    app = Aplicacion(root)
    root.mainloop()
